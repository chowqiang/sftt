/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _REQ_RESP_H_RPCGEN
#define _REQ_RESP_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define USER_NAME_MAX_LEN 32
#define PASSWD_MD5_LEN 33
#define SESSION_ID_LEN 32
#define DIR_PATH_MAX_LEN 256
#define FILE_NAME_MAX_LEN 256
#define FILE_ENTRY_MAX_CNT 16
#define CONTENT_BLOCK_SIZE 4096
#define NET_MSG_MAX_LEN 1024
#define CMD_MAX_LEN 1024
#define CMD_RET_BATCH_LEN 4096
#define IPV4_MAX_LEN 16
#define LOGGED_IN_USER_MAX_CNT 32
#define WRITE_MSG_MAX_LEN 4096
#define RESP_MESSAGE_MAX_LEN 128
#define DIRECT_CMD_RESP_MAX_LEN 1024
#define CONNECT_ID_LEN 32

struct version_info {
	short major;
	short minor;
	short revision;
};
typedef struct version_info version_info;

struct validate_req {
	int name_len;
	int passwd_len;
	char name[USER_NAME_MAX_LEN];
	char passwd_md5[PASSWD_MD5_LEN];
	struct version_info ver;
};
typedef struct validate_req validate_req;

struct validate_resp_data {
	long uid;
	char name[USER_NAME_MAX_LEN];
	char session_id[SESSION_ID_LEN];
	char connect_id[CONNECT_ID_LEN];
	char pwd[DIR_PATH_MAX_LEN];
};
typedef struct validate_resp_data validate_resp_data;

struct validate_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct validate_resp_data data;
};
typedef struct validate_resp validate_resp;

struct append_conn_req {
	char session_id[SESSION_ID_LEN];
	int type;
};
typedef struct append_conn_req append_conn_req;

struct append_conn_resp_data {
	char connect_id[CONNECT_ID_LEN];
};
typedef struct append_conn_resp_data append_conn_resp_data;

struct append_conn_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct append_conn_resp_data data;
};
typedef struct append_conn_resp append_conn_resp;

struct logged_in_user {
	char session_id[SESSION_ID_LEN];
	char name[USER_NAME_MAX_LEN];
	char ip[IPV4_MAX_LEN];
	int port;
};
typedef struct logged_in_user logged_in_user;

struct pwd_req {
	char session_id[SESSION_ID_LEN];
};
typedef struct pwd_req pwd_req;

struct pwd_resp_data {
	char pwd[DIR_PATH_MAX_LEN];
};
typedef struct pwd_resp_data pwd_resp_data;

struct pwd_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct pwd_resp_data data;
};
typedef struct pwd_resp pwd_resp;

struct ll_req {
	char session_id[SESSION_ID_LEN];
	char path[DIR_PATH_MAX_LEN];
	int to_peer;
	struct logged_in_user user;
};
typedef struct ll_req ll_req;

struct file_entry {
	char name[FILE_NAME_MAX_LEN];
	u_long mode;
	long type;
	long size;
	long c_time;
	long a_time;
	long m_time;
};
typedef struct file_entry file_entry;

struct ll_resp_data {
	int total;
	int this_nr;
	struct file_entry entries[FILE_ENTRY_MAX_CNT];
};
typedef struct ll_resp_data ll_resp_data;

struct ll_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct ll_resp_data data;
};
typedef struct ll_resp ll_resp;

struct cd_req {
	char session_id[SESSION_ID_LEN];
	char path[DIR_PATH_MAX_LEN];
};
typedef struct cd_req cd_req;

struct cd_resp_data {
	char pwd[DIR_PATH_MAX_LEN];
};
typedef struct cd_resp_data cd_resp_data;

struct cd_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct cd_resp_data data;
};
typedef struct cd_resp cd_resp;

struct get_req {
	char session_id[SESSION_ID_LEN];
	char path[DIR_PATH_MAX_LEN];
	int to_peer;
	struct logged_in_user user;
};
typedef struct get_req get_req;

struct trans_entry {
	int type;
	long total_size;
	int this_size;
	u_long mode;
	u_char content[CONTENT_BLOCK_SIZE];
};
typedef struct trans_entry trans_entry;

struct get_resp_data {
	int total_files;
	int file_idx;
	struct trans_entry entry;
};
typedef struct get_resp_data get_resp_data;

struct get_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct get_resp_data data;
};
typedef struct get_resp get_resp;

struct put_req_data {
	int total_files;
	int file_idx;
	struct trans_entry entry;
};
typedef struct put_req_data put_req_data;

struct put_req {
	char session_id[SESSION_ID_LEN];
	int to_peer;
	struct logged_in_user user;
	struct put_req_data data;
	int next;
};
typedef struct put_req put_req;

struct put_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
};
typedef struct put_resp put_resp;

struct common_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
};
typedef struct common_resp common_resp;

struct write_msg_req {
	int mtype;
	char name[16];
	int pid;
	int length;
	char mtext[NET_MSG_MAX_LEN];
};
typedef struct write_msg_req write_msg_req;

struct read_msg_req {
	int mtype;
};
typedef struct read_msg_req read_msg_req;

struct read_msg_resp_data {
	int mtype;
	char name[16];
	int pid;
	int length;
	char mtext[NET_MSG_MAX_LEN];
};
typedef struct read_msg_resp_data read_msg_resp_data;

struct read_msg_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct read_msg_resp_data data;
};
typedef struct read_msg_resp read_msg_resp;

struct mp_stat_req {
	char session_id[SESSION_ID_LEN];
};
typedef struct mp_stat_req mp_stat_req;

struct mp_stat_resp_data {
	long total_size;
	int total_nodes;
	int using_nodes;
	int free_nodes;
};
typedef struct mp_stat_resp_data mp_stat_resp_data;

struct mp_stat_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct mp_stat_resp_data data;
};
typedef struct mp_stat_resp mp_stat_resp;

struct directcmd_req {
	char session_id[SESSION_ID_LEN];
	char cmd[CMD_MAX_LEN];
};
typedef struct directcmd_req directcmd_req;

struct directcmd_resp_data {
	int total_len;
	int this_len;
	char content[DIRECT_CMD_RESP_MAX_LEN];
};
typedef struct directcmd_resp_data directcmd_resp_data;

struct directcmd_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct directcmd_resp_data data;
};
typedef struct directcmd_resp directcmd_resp;

struct who_req {
	char session_id[SESSION_ID_LEN];
};
typedef struct who_req who_req;

struct who_resp_data {
	int total;
	int this_nr;
	struct logged_in_user users[LOGGED_IN_USER_MAX_CNT];
};
typedef struct who_resp_data who_resp_data;

struct who_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct who_resp_data data;
};
typedef struct who_resp who_resp;

struct write_req {
	struct logged_in_user user;
	int len;
	char message[WRITE_MSG_MAX_LEN];
};
typedef struct write_req write_req;

struct write_resp_data {
	char message[WRITE_MSG_MAX_LEN];
};
typedef struct write_resp_data write_resp_data;

struct write_resp {
	int status;
	int next;
	char message[RESP_MESSAGE_MAX_LEN];
	struct write_resp_data data;
};
typedef struct write_resp write_resp;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_version_info (XDR *, version_info*);
extern  bool_t xdr_validate_req (XDR *, validate_req*);
extern  bool_t xdr_validate_resp_data (XDR *, validate_resp_data*);
extern  bool_t xdr_validate_resp (XDR *, validate_resp*);
extern  bool_t xdr_append_conn_req (XDR *, append_conn_req*);
extern  bool_t xdr_append_conn_resp_data (XDR *, append_conn_resp_data*);
extern  bool_t xdr_append_conn_resp (XDR *, append_conn_resp*);
extern  bool_t xdr_logged_in_user (XDR *, logged_in_user*);
extern  bool_t xdr_pwd_req (XDR *, pwd_req*);
extern  bool_t xdr_pwd_resp_data (XDR *, pwd_resp_data*);
extern  bool_t xdr_pwd_resp (XDR *, pwd_resp*);
extern  bool_t xdr_ll_req (XDR *, ll_req*);
extern  bool_t xdr_file_entry (XDR *, file_entry*);
extern  bool_t xdr_ll_resp_data (XDR *, ll_resp_data*);
extern  bool_t xdr_ll_resp (XDR *, ll_resp*);
extern  bool_t xdr_cd_req (XDR *, cd_req*);
extern  bool_t xdr_cd_resp_data (XDR *, cd_resp_data*);
extern  bool_t xdr_cd_resp (XDR *, cd_resp*);
extern  bool_t xdr_get_req (XDR *, get_req*);
extern  bool_t xdr_trans_entry (XDR *, trans_entry*);
extern  bool_t xdr_get_resp_data (XDR *, get_resp_data*);
extern  bool_t xdr_get_resp (XDR *, get_resp*);
extern  bool_t xdr_put_req_data (XDR *, put_req_data*);
extern  bool_t xdr_put_req (XDR *, put_req*);
extern  bool_t xdr_put_resp (XDR *, put_resp*);
extern  bool_t xdr_common_resp (XDR *, common_resp*);
extern  bool_t xdr_write_msg_req (XDR *, write_msg_req*);
extern  bool_t xdr_read_msg_req (XDR *, read_msg_req*);
extern  bool_t xdr_read_msg_resp_data (XDR *, read_msg_resp_data*);
extern  bool_t xdr_read_msg_resp (XDR *, read_msg_resp*);
extern  bool_t xdr_mp_stat_req (XDR *, mp_stat_req*);
extern  bool_t xdr_mp_stat_resp_data (XDR *, mp_stat_resp_data*);
extern  bool_t xdr_mp_stat_resp (XDR *, mp_stat_resp*);
extern  bool_t xdr_directcmd_req (XDR *, directcmd_req*);
extern  bool_t xdr_directcmd_resp_data (XDR *, directcmd_resp_data*);
extern  bool_t xdr_directcmd_resp (XDR *, directcmd_resp*);
extern  bool_t xdr_who_req (XDR *, who_req*);
extern  bool_t xdr_who_resp_data (XDR *, who_resp_data*);
extern  bool_t xdr_who_resp (XDR *, who_resp*);
extern  bool_t xdr_write_req (XDR *, write_req*);
extern  bool_t xdr_write_resp_data (XDR *, write_resp_data*);
extern  bool_t xdr_write_resp (XDR *, write_resp*);

#else /* K&R C */
extern bool_t xdr_version_info ();
extern bool_t xdr_validate_req ();
extern bool_t xdr_validate_resp_data ();
extern bool_t xdr_validate_resp ();
extern bool_t xdr_append_conn_req ();
extern bool_t xdr_append_conn_resp_data ();
extern bool_t xdr_append_conn_resp ();
extern bool_t xdr_logged_in_user ();
extern bool_t xdr_pwd_req ();
extern bool_t xdr_pwd_resp_data ();
extern bool_t xdr_pwd_resp ();
extern bool_t xdr_ll_req ();
extern bool_t xdr_file_entry ();
extern bool_t xdr_ll_resp_data ();
extern bool_t xdr_ll_resp ();
extern bool_t xdr_cd_req ();
extern bool_t xdr_cd_resp_data ();
extern bool_t xdr_cd_resp ();
extern bool_t xdr_get_req ();
extern bool_t xdr_trans_entry ();
extern bool_t xdr_get_resp_data ();
extern bool_t xdr_get_resp ();
extern bool_t xdr_put_req_data ();
extern bool_t xdr_put_req ();
extern bool_t xdr_put_resp ();
extern bool_t xdr_common_resp ();
extern bool_t xdr_write_msg_req ();
extern bool_t xdr_read_msg_req ();
extern bool_t xdr_read_msg_resp_data ();
extern bool_t xdr_read_msg_resp ();
extern bool_t xdr_mp_stat_req ();
extern bool_t xdr_mp_stat_resp_data ();
extern bool_t xdr_mp_stat_resp ();
extern bool_t xdr_directcmd_req ();
extern bool_t xdr_directcmd_resp_data ();
extern bool_t xdr_directcmd_resp ();
extern bool_t xdr_who_req ();
extern bool_t xdr_who_resp_data ();
extern bool_t xdr_who_resp ();
extern bool_t xdr_write_req ();
extern bool_t xdr_write_resp_data ();
extern bool_t xdr_write_resp ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_REQ_RESP_H_RPCGEN */
