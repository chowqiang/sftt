/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _REQ_RSP_H_RPCGEN
#define _REQ_RSP_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define USER_NAME_MAX_LEN 32
#define PASSWD_MD5_LEN 33
#define SESSION_ID_LEN 32
#define DIR_PATH_MAX_LEN 256
#define FILE_NAME_MAX_LEN 256
#define FILE_ENTRY_MAX_CNT 16
#define CONTENT_BLOCK_SIZE 4096
#define NET_MSG_MAX_LEN 1024

struct validate_req {
	long name_len;
	long passwd_len;
	char name[USER_NAME_MAX_LEN];
	char passwd_md5[PASSWD_MD5_LEN];
};
typedef struct validate_req validate_req;

struct validate_resp {
	long status;
	long uid;
	char name[USER_NAME_MAX_LEN];
	char session_id[SESSION_ID_LEN];
	char pwd[DIR_PATH_MAX_LEN];
};
typedef struct validate_resp validate_resp;

struct pwd_req {
	char session_id[SESSION_ID_LEN];
};
typedef struct pwd_req pwd_req;

struct pwd_resp {
	long status;
	char pwd[DIR_PATH_MAX_LEN];
};
typedef struct pwd_resp pwd_resp;

struct ll_req {
	char session_id[SESSION_ID_LEN];
	char path[DIR_PATH_MAX_LEN];
};
typedef struct ll_req ll_req;

struct file_entry {
	char name[FILE_NAME_MAX_LEN];
	u_long mode;
	long type;
	long size;
	long c_time;
	long a_time;
	long m_time;
};
typedef struct file_entry file_entry;

struct ll_resp {
	int nr;
	struct file_entry entries[FILE_ENTRY_MAX_CNT];
	int idx;
};
typedef struct ll_resp ll_resp;

struct cd_req {
	char session_id[SESSION_ID_LEN];
	char path[DIR_PATH_MAX_LEN];
};
typedef struct cd_req cd_req;

struct cd_resp {
	long status;
	char pwd[DIR_PATH_MAX_LEN];
};
typedef struct cd_resp cd_resp;

struct get_req {
	char session_id[SESSION_ID_LEN];
	char path[DIR_PATH_MAX_LEN];
};
typedef struct get_req get_req;

struct trans_entry {
	long type;
	long total_size;
	long idx;
	long len;
	u_long mode;
	u_char content[CONTENT_BLOCK_SIZE];
};
typedef struct trans_entry trans_entry;

struct get_resp {
	long nr;
	long idx;
	struct trans_entry entry;
};
typedef struct get_resp get_resp;

struct put_req {
	char session_id[SESSION_ID_LEN];
	long nr;
	long idx;
	struct trans_entry entry;
};
typedef struct put_req put_req;

struct put_resp {
	long status;
};
typedef struct put_resp put_resp;

struct common_resp {
	long status;
};
typedef struct common_resp common_resp;

struct write_msg_req {
	int mtype;
	char name[16];
	int pid;
	int length;
	char mtext[NET_MSG_MAX_LEN];
};
typedef struct write_msg_req write_msg_req;

struct read_msg_req {
	int mtype;
};
typedef struct read_msg_req read_msg_req;

struct read_msg_resp {
	int mtype;
	char name[16];
	int pid;
	int length;
	char mtext[NET_MSG_MAX_LEN];
};
typedef struct read_msg_resp read_msg_resp;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_validate_req (XDR *, validate_req*);
extern  bool_t xdr_validate_resp (XDR *, validate_resp*);
extern  bool_t xdr_pwd_req (XDR *, pwd_req*);
extern  bool_t xdr_pwd_resp (XDR *, pwd_resp*);
extern  bool_t xdr_ll_req (XDR *, ll_req*);
extern  bool_t xdr_file_entry (XDR *, file_entry*);
extern  bool_t xdr_ll_resp (XDR *, ll_resp*);
extern  bool_t xdr_cd_req (XDR *, cd_req*);
extern  bool_t xdr_cd_resp (XDR *, cd_resp*);
extern  bool_t xdr_get_req (XDR *, get_req*);
extern  bool_t xdr_trans_entry (XDR *, trans_entry*);
extern  bool_t xdr_get_resp (XDR *, get_resp*);
extern  bool_t xdr_put_req (XDR *, put_req*);
extern  bool_t xdr_put_resp (XDR *, put_resp*);
extern  bool_t xdr_common_resp (XDR *, common_resp*);
extern  bool_t xdr_write_msg_req (XDR *, write_msg_req*);
extern  bool_t xdr_read_msg_req (XDR *, read_msg_req*);
extern  bool_t xdr_read_msg_resp (XDR *, read_msg_resp*);

#else /* K&R C */
extern bool_t xdr_validate_req ();
extern bool_t xdr_validate_resp ();
extern bool_t xdr_pwd_req ();
extern bool_t xdr_pwd_resp ();
extern bool_t xdr_ll_req ();
extern bool_t xdr_file_entry ();
extern bool_t xdr_ll_resp ();
extern bool_t xdr_cd_req ();
extern bool_t xdr_cd_resp ();
extern bool_t xdr_get_req ();
extern bool_t xdr_trans_entry ();
extern bool_t xdr_get_resp ();
extern bool_t xdr_put_req ();
extern bool_t xdr_put_resp ();
extern bool_t xdr_common_resp ();
extern bool_t xdr_write_msg_req ();
extern bool_t xdr_read_msg_req ();
extern bool_t xdr_read_msg_resp ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_REQ_RSP_H_RPCGEN */
